import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var BeatonePlugin = /** @class */ (function (_super) {
    __extends(BeatonePlugin, _super);
    function BeatonePlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BeatonePlugin.prototype.connectBeatOne = function () { return cordova(this, "connectBeatOne", {}, arguments); };
    BeatonePlugin.prototype.getSteps = function () { return cordova(this, "getSteps", {}, arguments); };
    BeatonePlugin.prototype.connecTensiometer = function () { return cordova(this, "connecTensiometer", {}, arguments); };
    BeatonePlugin.prototype.startMeasurement = function () { return cordova(this, "startMeasurement", {}, arguments); };
    BeatonePlugin.prototype.getHeart = function () { return cordova(this, "getHeart", {}, arguments); };
    BeatonePlugin.pluginName = "BeatOnePlugin";
    BeatonePlugin.plugin = "cordova-plugin-BeatOnePlugin";
    BeatonePlugin.pluginRef = "window.plugins.BeatOnePlugin";
    BeatonePlugin.repo = "https://github.com/EddyVerbruggen/BeatOnePlugin-PhoneGap-Plugin";
    BeatonePlugin.platforms = ["Android", "iOS", "Windows Phone 8"];
    BeatonePlugin.decorators = [
        { type: Injectable }
    ];
    return BeatonePlugin;
}(IonicNativePlugin));
export { BeatonePlugin };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL0JlYXRPbmVQbHVnaW4vbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBNEJyQyxpQ0FBaUI7Ozs7SUFNbEQsc0NBQWM7SUFRZCxnQ0FBUTtJQVFSLHlDQUFpQjtJQVFqQix3Q0FBZ0I7SUFTaEIsZ0NBQVE7Ozs7Ozs7Z0JBeENULFVBQVU7O3dCQTVCWDtFQTZCbUMsaUJBQWlCO1NBQXZDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEJlYXRvbmVQbHVnaW5cclxuICogQGRlc2NyaXB0aW9uIFRoaXMgcGx1Z2luIGFsbG93cyB5b3UgdG8gc3dpdGNoIHRoZSBCZWF0T25lUGx1Z2luIC8gdG9yY2ggb2YgdGhlIGRldmljZSBvbiBhbmQgb2ZmLlxyXG4gKlxyXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLUJlYXRPbmVQbHVnaW5gLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbQmVhdE9uZVBsdWdpbiBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL0JlYXRPbmVQbHVnaW4tUGhvbmVHYXAtUGx1Z2luKS5cclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQmVhdE9uZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvQmVhdE9uZVBsdWdpbi9uZ3gnO1xyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIEJlYXRPbmVQbHVnaW46IEJlYXRPbmVQbHVnaW4pIHsgfVxyXG4gKlxyXG4gKiAuLi5cclxuICpcclxuICogdGhpcy5CZWF0T25lUGx1Z2luLnN3aXRjaE9uKCk7XHJcbiAqXHJcbiAqIGBgYFxyXG4gKi9cclxuQFBsdWdpbih7XHJcbiAgcGx1Z2luTmFtZTogJ0JlYXRPbmVQbHVnaW4nLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLUJlYXRPbmVQbHVnaW4nLFxyXG4gIHBsdWdpblJlZjogJ3dpbmRvdy5wbHVnaW5zLkJlYXRPbmVQbHVnaW4nLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vQmVhdE9uZVBsdWdpbi1QaG9uZUdhcC1QbHVnaW4nLFxyXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdXaW5kb3dzIFBob25lIDgnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQmVhdG9uZVBsdWdpbiBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcclxuICAvKipcclxuICAgKiBDaGVja3MgaWYgdGhlIEJlYXRPbmVQbHVnaW4gaXMgYXZhaWxhYmxlXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgYm9vbGVhbiBzdGF0aW5nIGlmIHRoZSBCZWF0T25lUGx1Z2luIGlzIGF2YWlsYWJsZS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgY29ubmVjdEJlYXRPbmUoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogQ2hlY2tzIGlmIHRoZSBCZWF0T25lUGx1Z2luIGlzIGF2YWlsYWJsZVxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIGJvb2xlYW4gc3RhdGluZyBpZiB0aGUgQmVhdE9uZVBsdWdpbiBpcyBhdmFpbGFibGUuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGdldFN0ZXBzKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIENoZWNrcyBpZiB0aGUgQmVhdE9uZVBsdWdpbiBpcyBhdmFpbGFibGVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBib29sZWFuIHN0YXRpbmcgaWYgdGhlIEJlYXRPbmVQbHVnaW4gaXMgYXZhaWxhYmxlLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBjb25uZWNUZW5zaW9tZXRlcigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuIC8qKlxyXG4gICAqIENoZWNrcyBpZiB0aGUgQmVhdE9uZVBsdWdpbiBpcyBhdmFpbGFibGVcclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBib29sZWFuIHN0YXRpbmcgaWYgdGhlIEJlYXRPbmVQbHVnaW4gaXMgYXZhaWxhYmxlLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzdGFydE1lYXN1cmVtZW50KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVja3MgaWYgdGhlIEJlYXRPbmVQbHVnaW4gaXMgYXZhaWxhYmxlXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgYm9vbGVhbiBzdGF0aW5nIGlmIHRoZSBCZWF0T25lUGx1Z2luIGlzIGF2YWlsYWJsZS5cclxuICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZ2V0SGVhcnQoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG59XHJcblxyXG4iXX0=